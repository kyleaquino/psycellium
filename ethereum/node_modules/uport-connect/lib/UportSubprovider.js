'use strict';

var cov_29uun6hmfs = function () {
  var path = '/Users/onetrob/Documents/uport/libs/connect/src/UportSubprovider.js',
      hash = 'baef128a910992bbb0bd7c8ef7dd180d0da0837c',
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/Users/onetrob/Documents/uport/libs/connect/src/UportSubprovider.js',
    statementMap: {
      '0': {
        start: {
          line: 21,
          column: 17
        },
        end: {
          line: 21,
          column: 21
        }
      },
      '1': {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 28,
          column: 5
        }
      },
      '2': {
        start: {
          line: 24,
          column: 6
        },
        end: {
          line: 24,
          column: 54
        }
      },
      '3': {
        start: {
          line: 26,
          column: 6
        },
        end: {
          line: 26,
          column: 30
        }
      },
      '4': {
        start: {
          line: 27,
          column: 6
        },
        end: {
          line: 27,
          column: 95
        }
      },
      '5': {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 30,
          column: 26
        }
      },
      '6': {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 39,
          column: 5
        }
      },
      '7': {
        start: {
          line: 32,
          column: 6
        },
        end: {
          line: 32,
          column: 53
        }
      },
      '8': {
        start: {
          line: 32,
          column: 24
        },
        end: {
          line: 32,
          column: 53
        }
      },
      '9': {
        start: {
          line: 33,
          column: 6
        },
        end: {
          line: 38,
          column: 25
        }
      },
      '10': {
        start: {
          line: 35,
          column: 29
        },
        end: {
          line: 35,
          column: 125
        }
      },
      '11': {
        start: {
          line: 36,
          column: 10
        },
        end: {
          line: 36,
          column: 76
        }
      },
      '12': {
        start: {
          line: 38,
          column: 15
        },
        end: {
          line: 38,
          column: 24
        }
      },
      '13': {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 46,
          column: 5
        }
      },
      '14': {
        start: {
          line: 42,
          column: 6
        },
        end: {
          line: 45,
          column: 7
        }
      },
      '15': {
        start: {
          line: 43,
          column: 19
        },
        end: {
          line: 43,
          column: 36
        }
      },
      '16': {
        start: {
          line: 44,
          column: 17
        },
        end: {
          line: 44,
          column: 26
        }
      },
      '17': {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 57,
          column: 5
        }
      },
      '18': {
        start: {
          line: 51,
          column: 19
        },
        end: {
          line: 51,
          column: 34
        }
      },
      '19': {
        start: {
          line: 52,
          column: 6
        },
        end: {
          line: 55,
          column: 7
        }
      },
      '20': {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 35
        }
      },
      '21': {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 19
        }
      },
      '22': {
        start: {
          line: 56,
          column: 6
        },
        end: {
          line: 56,
          column: 18
        }
      },
      '23': {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 59,
          column: 70
        }
      },
      '24': {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 60,
          column: 15
        }
      },
      '25': {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 68,
          column: 44
        }
      },
      '26': {
        start: {
          line: 82,
          column: 17
        },
        end: {
          line: 82,
          column: 21
        }
      },
      '27': {
        start: {
          line: 83,
          column: 20
        },
        end: {
          line: 97,
          column: 5
        }
      },
      '28': {
        start: {
          line: 84,
          column: 6
        },
        end: {
          line: 96,
          column: 7
        }
      },
      '29': {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 89,
          column: 10
        }
      },
      '30': {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 95,
          column: 10
        }
      },
      '31': {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 101,
          column: 5
        }
      },
      '32': {
        start: {
          line: 99,
          column: 6
        },
        end: {
          line: 99,
          column: 61
        }
      },
      '33': {
        start: {
          line: 100,
          column: 6
        },
        end: {
          line: 100,
          column: 12
        }
      },
      '34': {
        start: {
          line: 102,
          column: 4
        },
        end: {
          line: 117,
          column: 5
        }
      },
      '35': {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 39
        }
      },
      '36': {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 109,
          column: 10
        }
      },
      '37': {
        start: {
          line: 108,
          column: 10
        },
        end: {
          line: 108,
          column: 35
        }
      },
      '38': {
        start: {
          line: 111,
          column: 23
        },
        end: {
          line: 111,
          column: 40
        }
      },
      '39': {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 114,
          column: 10
        }
      },
      '40': {
        start: {
          line: 113,
          column: 10
        },
        end: {
          line: 113,
          column: 26
        }
      },
      '41': {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 116,
          column: 57
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 20,
            column: 2
          },
          end: {
            line: 20,
            column: 3
          }
        },
        loc: {
          start: {
            line: 20,
            column: 69
          },
          end: {
            line: 47,
            column: 3
          }
        },
        line: 20
      },
      '1': {
        name: '(anonymous_1)',
        decl: {
          start: {
            line: 31,
            column: 22
          },
          end: {
            line: 31,
            column: 23
          }
        },
        loc: {
          start: {
            line: 31,
            column: 30
          },
          end: {
            line: 39,
            column: 5
          }
        },
        line: 31
      },
      '2': {
        name: '(anonymous_2)',
        decl: {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        },
        loc: {
          start: {
            line: 34,
            column: 19
          },
          end: {
            line: 37,
            column: 9
          }
        },
        line: 34
      },
      '3': {
        name: '(anonymous_3)',
        decl: {
          start: {
            line: 38,
            column: 6
          },
          end: {
            line: 38,
            column: 7
          }
        },
        loc: {
          start: {
            line: 38,
            column: 15
          },
          end: {
            line: 38,
            column: 24
          }
        },
        line: 38
      },
      '4': {
        name: '(anonymous_4)',
        decl: {
          start: {
            line: 41,
            column: 27
          },
          end: {
            line: 41,
            column: 28
          }
        },
        loc: {
          start: {
            line: 41,
            column: 42
          },
          end: {
            line: 46,
            column: 5
          }
        },
        line: 41
      },
      '5': {
        name: '(anonymous_5)',
        decl: {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        },
        loc: {
          start: {
            line: 43,
            column: 19
          },
          end: {
            line: 43,
            column: 36
          }
        },
        line: 43
      },
      '6': {
        name: '(anonymous_6)',
        decl: {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        },
        loc: {
          start: {
            line: 44,
            column: 17
          },
          end: {
            line: 44,
            column: 26
          }
        },
        line: 44
      },
      '7': {
        name: '(anonymous_7)',
        decl: {
          start: {
            line: 49,
            column: 2
          },
          end: {
            line: 49,
            column: 3
          }
        },
        loc: {
          start: {
            line: 49,
            column: 22
          },
          end: {
            line: 61,
            column: 3
          }
        },
        line: 49
      },
      '8': {
        name: '(anonymous_8)',
        decl: {
          start: {
            line: 67,
            column: 2
          },
          end: {
            line: 67,
            column: 3
          }
        },
        loc: {
          start: {
            line: 67,
            column: 27
          },
          end: {
            line: 69,
            column: 3
          }
        },
        line: 67
      },
      '9': {
        name: '(anonymous_9)',
        decl: {
          start: {
            line: 81,
            column: 2
          },
          end: {
            line: 81,
            column: 3
          }
        },
        loc: {
          start: {
            line: 81,
            column: 32
          },
          end: {
            line: 118,
            column: 3
          }
        },
        line: 81
      },
      '10': {
        name: '(anonymous_10)',
        decl: {
          start: {
            line: 83,
            column: 20
          },
          end: {
            line: 83,
            column: 21
          }
        },
        loc: {
          start: {
            line: 83,
            column: 39
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 83
      },
      '11': {
        name: '(anonymous_11)',
        decl: {
          start: {
            line: 107,
            column: 31
          },
          end: {
            line: 107,
            column: 32
          }
        },
        loc: {
          start: {
            line: 107,
            column: 51
          },
          end: {
            line: 109,
            column: 9
          }
        },
        line: 107
      },
      '12': {
        name: '(anonymous_12)',
        decl: {
          start: {
            line: 112,
            column: 46
          },
          end: {
            line: 112,
            column: 47
          }
        },
        loc: {
          start: {
            line: 112,
            column: 59
          },
          end: {
            line: 114,
            column: 9
          }
        },
        line: 112
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        }, {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        }],
        line: 23
      },
      '1': {
        loc: {
          start: {
            line: 32,
            column: 6
          },
          end: {
            line: 32,
            column: 53
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 32,
            column: 6
          },
          end: {
            line: 32,
            column: 53
          }
        }, {
          start: {
            line: 32,
            column: 6
          },
          end: {
            line: 32,
            column: 53
          }
        }],
        line: 32
      },
      '2': {
        loc: {
          start: {
            line: 36,
            column: 10
          },
          end: {
            line: 36,
            column: 76
          }
        },
        type: 'cond-expr',
        locations: [{
          start: {
            line: 36,
            column: 37
          },
          end: {
            line: 36,
            column: 59
          }
        }, {
          start: {
            line: 36,
            column: 62
          },
          end: {
            line: 36,
            column: 76
          }
        }],
        line: 36
      },
      '3': {
        loc: {
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        }, {
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        }],
        line: 50
      },
      '4': {
        loc: {
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 50,
            column: 42
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 50,
            column: 23
          }
        }, {
          start: {
            line: 50,
            column: 27
          },
          end: {
            line: 50,
            column: 42
          }
        }],
        line: 50
      },
      '5': {
        loc: {
          start: {
            line: 52,
            column: 6
          },
          end: {
            line: 55,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 52,
            column: 6
          },
          end: {
            line: 55,
            column: 7
          }
        }, {
          start: {
            line: 52,
            column: 6
          },
          end: {
            line: 55,
            column: 7
          }
        }],
        line: 52
      },
      '6': {
        loc: {
          start: {
            line: 59,
            column: 19
          },
          end: {
            line: 59,
            column: 70
          }
        },
        type: 'cond-expr',
        locations: [{
          start: {
            line: 59,
            column: 37
          },
          end: {
            line: 59,
            column: 60
          }
        }, {
          start: {
            line: 59,
            column: 63
          },
          end: {
            line: 59,
            column: 70
          }
        }],
        line: 59
      },
      '7': {
        loc: {
          start: {
            line: 84,
            column: 6
          },
          end: {
            line: 96,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 84,
            column: 6
          },
          end: {
            line: 96,
            column: 7
          }
        }, {
          start: {
            line: 84,
            column: 6
          },
          end: {
            line: 96,
            column: 7
          }
        }],
        line: 84
      },
      '8': {
        loc: {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        }, {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        }],
        line: 98
      },
      '9': {
        loc: {
          start: {
            line: 102,
            column: 4
          },
          end: {
            line: 117,
            column: 5
          }
        },
        type: 'switch',
        locations: [{
          start: {
            line: 104,
            column: 6
          },
          end: {
            line: 105,
            column: 39
          }
        }, {
          start: {
            line: 106,
            column: 6
          },
          end: {
            line: 109,
            column: 10
          }
        }, {
          start: {
            line: 110,
            column: 6
          },
          end: {
            line: 114,
            column: 10
          }
        }, {
          start: {
            line: 115,
            column: 6
          },
          end: {
            line: 116,
            column: 57
          }
        }],
        line: 102
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0,
      '26': 0,
      '27': 0,
      '28': 0,
      '29': 0,
      '30': 0,
      '31': 0,
      '32': 0,
      '33': 0,
      '34': 0,
      '35': 0,
      '36': 0,
      '37': 0,
      '38': 0,
      '39': 0,
      '40': 0,
      '41': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0],
      '2': [0, 0],
      '3': [0, 0],
      '4': [0, 0],
      '5': [0, 0],
      '6': [0, 0],
      '7': [0, 0],
      '8': [0, 0],
      '9': [0, 0, 0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _async = require('async');

var _async2 = _interopRequireDefault(_async);

var _mnid = require('mnid');

var _ethjsProviderHttp = require('ethjs-provider-http');

var _ethjsProviderHttp2 = _interopRequireDefault(_ethjsProviderHttp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
*  A web3 style provider which can easily be wrapped with uPort functionality.
*  Builds on a base provider. Used in Connect to wrap a provider with uPort specific
*  functionality.
*/
var UportSubprovider = function () {
  /**
   * Instantiates a new wrapped provider
   *
   * @param       {Object}            args                   required arguments
   * @param       {Function}          args.requestAddress    function to get the address of a uPort identity.
   * @param       {Function}          args.sendTransaction   function to handle passing transaction information to a uPort application
   * @param       {Object}            args.provider          a web3 sytle provider
   * @return      {UportSubprovider}                         self
   */
  function UportSubprovider(_ref) {
    var _this = this;

    var requestAddress = _ref.requestAddress,
        sendTransaction = _ref.sendTransaction,
        provider = _ref.provider,
        network = _ref.network;

    _classCallCheck(this, UportSubprovider);

    cov_29uun6hmfs.f[0]++;

    var self = (cov_29uun6hmfs.s[0]++, this);

    cov_29uun6hmfs.s[1]++;
    if (!provider) {
      cov_29uun6hmfs.b[0][0]++;
      cov_29uun6hmfs.s[2]++;

      this.provider = new _ethjsProviderHttp2.default(network.rpcUrl);
    } else {
      cov_29uun6hmfs.b[0][1]++;
      cov_29uun6hmfs.s[3]++;

      this.provider = provider;
      cov_29uun6hmfs.s[4]++;
      console.warn('Uport functionality may not be entirely compatible with custom providers.');
    }

    cov_29uun6hmfs.s[5]++;
    this.network = network;
    cov_29uun6hmfs.s[6]++;
    this.getAddress = function (cb) {
      cov_29uun6hmfs.f[1]++;
      cov_29uun6hmfs.s[7]++;

      if (self.address) {
          cov_29uun6hmfs.b[1][0]++;
          cov_29uun6hmfs.s[8]++;
          return cb(null, self.address);
        } else {
        cov_29uun6hmfs.b[1][1]++;
      }cov_29uun6hmfs.s[9]++;
      requestAddress().then(function (address) {
        cov_29uun6hmfs.f[2]++;

        var errorMatch = (cov_29uun6hmfs.s[10]++, new Error('Address/Account received does not match the network your provider is configured for'));
        cov_29uun6hmfs.s[11]++;
        _this.setAccount(address) ? (cov_29uun6hmfs.b[2][0]++, cb(null, self.address)) : (cov_29uun6hmfs.b[2][1]++, cb(errorMatch));
      }, function (error) {
        cov_29uun6hmfs.f[3]++;
        cov_29uun6hmfs.s[12]++;
        return cb(error);
      });
    };

    cov_29uun6hmfs.s[13]++;
    this.sendTransaction = function (txobj, cb) {
      cov_29uun6hmfs.f[4]++;
      cov_29uun6hmfs.s[14]++;

      sendTransaction(txobj).then(function (address) {
        cov_29uun6hmfs.f[5]++;
        cov_29uun6hmfs.s[15]++;
        return cb(null, address);
      }, function (error) {
        cov_29uun6hmfs.f[6]++;
        cov_29uun6hmfs.s[16]++;
        return cb(error);
      });
    };
  }

  _createClass(UportSubprovider, [{
    key: 'setAccount',
    value: function setAccount(address) {
      cov_29uun6hmfs.f[7]++;
      cov_29uun6hmfs.s[17]++;

      if ((cov_29uun6hmfs.b[4][0]++, this.network.id) && (cov_29uun6hmfs.b[4][1]++, (0, _mnid.isMNID)(address))) {
        cov_29uun6hmfs.b[3][0]++;

        var mnid = (cov_29uun6hmfs.s[18]++, (0, _mnid.decode)(address));
        cov_29uun6hmfs.s[19]++;
        if (this.network.id === mnid.network) {
          cov_29uun6hmfs.b[5][0]++;
          cov_29uun6hmfs.s[20]++;

          this.address = mnid.address;
          cov_29uun6hmfs.s[21]++;
          return true;
        } else {
          cov_29uun6hmfs.b[5][1]++;
        }
        cov_29uun6hmfs.s[22]++;
        return false;
      } else {
        cov_29uun6hmfs.b[3][1]++;
      }
      // Does not force validation, if no network id given will still set address
      cov_29uun6hmfs.s[23]++;
      this.address = (0, _mnid.isMNID)(address) ? (cov_29uun6hmfs.b[6][0]++, (0, _mnid.decode)(address).address) : (cov_29uun6hmfs.b[6][1]++, address);
      cov_29uun6hmfs.s[24]++;
      return true;
    }

    /**
     * Replace sync send with async send
     * @private
     */

  }, {
    key: 'send',
    value: function send(payload, callback) {
      cov_29uun6hmfs.f[8]++;
      cov_29uun6hmfs.s[25]++;

      return this.sendAsync(payload, callback);
    }

    /**
     *  Overrides sendAsync to caputure the following RPC calls eth_coinbase, eth_accounts,
     *  and eth_sendTransaction. All other calls are passed to the based provider.
     *  eth_coinbase, eth_accounts will get a uPort identity address with getAddress.
     *  While eth_sendTransaction with send transactions to a uPort app with sendTransaction
     *
     * @param       {Any}            payload           request payload
     * @param       {Function}       callback          called with response or error
     * @private
     */

  }, {
    key: 'sendAsync',
    value: function sendAsync(payload, callback) {
      cov_29uun6hmfs.f[9]++;

      var self = (cov_29uun6hmfs.s[26]++, this);
      cov_29uun6hmfs.s[27]++;
      var respond = function respond(error, result) {
        cov_29uun6hmfs.f[10]++;
        cov_29uun6hmfs.s[28]++;

        if (error) {
          cov_29uun6hmfs.b[7][0]++;
          cov_29uun6hmfs.s[29]++;

          callback({
            id: payload.id,
            jsonrpc: '2.0',
            error: error.message
          });
        } else {
          cov_29uun6hmfs.b[7][1]++;
          cov_29uun6hmfs.s[30]++;

          callback(null, {
            id: payload.id,
            jsonrpc: '2.0',
            result: result
          });
        }
      };
      cov_29uun6hmfs.s[31]++;
      if (Array.isArray(payload)) {
        cov_29uun6hmfs.b[8][0]++;
        cov_29uun6hmfs.s[32]++;

        _async2.default.map(payload, self.sendAsync.bind(self), callback);
        cov_29uun6hmfs.s[33]++;
        return;
      } else {
        cov_29uun6hmfs.b[8][1]++;
      }
      cov_29uun6hmfs.s[34]++;
      switch (payload.method) {
        // TODO consider removing, not necessary for interaction with uport
        case 'eth_coinbase':
          cov_29uun6hmfs.b[9][0]++;
          cov_29uun6hmfs.s[35]++;

          return self.getAddress(respond);
        case 'eth_accounts':
          cov_29uun6hmfs.b[9][1]++;
          cov_29uun6hmfs.s[36]++;

          return self.getAddress(function (error, address) {
            cov_29uun6hmfs.f[11]++;
            cov_29uun6hmfs.s[37]++;

            respond(error, [address]);
          });
        case 'eth_sendTransaction':
          cov_29uun6hmfs.b[9][2]++;

          var txParams = (cov_29uun6hmfs.s[38]++, payload.params[0]);
          cov_29uun6hmfs.s[39]++;
          return self.sendTransaction(txParams, function (err, tx) {
            cov_29uun6hmfs.f[12]++;
            cov_29uun6hmfs.s[40]++;

            respond(err, tx);
          });
        default:
          cov_29uun6hmfs.b[9][3]++;
          cov_29uun6hmfs.s[41]++;

          return self.provider.sendAsync(payload, callback);
      }
    }
  }]);

  return UportSubprovider;
}();

exports.default = UportSubprovider;