'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getImageDataURI = exports.notifyPushSent = exports.failure = exports.success = exports.open = exports.close = undefined;

var _qrImage = require('qr-image');

var _qrImage2 = _interopRequireDefault(_qrImage);

var _templates = require('./templates');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**  
 * @module uport-transports/transport/ui
 * @description
 * A set of ui utility functions and default displays for bridging between
 * a web browser and a uport user's mobile app
 */

/**
 *  Given a string of data it returns a image URI which is a QR code. An image
 *  URI can be displayed in a img html tag by setting the src attrbiute to the
 *  the image URI.
 *
 *  @param    {String}     data      data string, typically a uPort URI
 *  @return   {String}               image URI
 */
var getImageDataURI = function getImageDataURI(data) {
  var pngBuffer = _qrImage2.default.imageSync(data, { type: 'png' });
  return 'data:image/png;charset=utf-8;base64, ' + pngBuffer.toString('base64');
};

/**
 *  Closes the default QR pop over
 */
var close = function close() {
  var uportWrapper = document.getElementById('uport-wrapper');
  document.body.removeChild(uportWrapper);
};

/**
 * A utility function for rendering a modal with particular content
 *
 * @param     {String}    content   html string defining the inside of the modal
 * @param     {Function}  [close]   the handler to fire when the modal's x button is pressed
 */
var makeModal = function makeModal(content) {
  var closeModal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : close;

  var wrapper = document.createElement('div');
  wrapper.setAttribute('id', 'uport-wrapper');

  wrapper.innerHTML = content;

  document.body.appendChild(wrapper);
  document.getElementById('uport__modal-x').addEventListener('click', closeModal);
};

/**
 *  A default QR pop over display, which injects the neccessary html
 *
 *  @param    {String}     data       data which is displayed in QR code
 *  @param    {Function}   cancel     a function called when the cancel button is clicked
 *  @param    {String}     modalText  message to be displayed above the QR in the modal
 */
var open = function open(data, cancel, modalText) {
  var closeModal = close; // closure over close for use in callbacks etc.
  var content = (0, _templates.qrModal)(getImageDataURI(data), modalText);

  var cancelClick = function cancelClick(event) {
    document.getElementById('uport__qr-text').innerHTML = 'Cancelling';
    if (cancel) cancel();
    closeModal();
  };

  makeModal(content, cancelClick);
};

/**
 * Show a notification to the user that a push has been sent to their phone
 * @param   {Function}    fallback    The fallback handler if the user doesn't receive a push
 */
var notifyPushSent = function notifyPushSent(fallback) {
  makeModal(_templates.pushModal);
  document.getElementById('uport__push-not-received').addEventListener('click', function () {
    close();fallback();
  });
};

/**
 * Show a success screen to the user which automatically dismisses
 * after 2 seconds
 */
var success = function success() {
  var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 500;

  makeModal(_templates.successModal);
  setTimeout(close, timeout);
};

/**
 * Show a failure modal that gives users the option to repeat the failed action
 * @param {Function}  resend  The function that should fire to allow the user to retry
 */
var failure = function failure(retry) {
  makeModal(_templates.failureModal);

  document.getElementById('uport__failure-retry').addEventListener('click', retry);
};

/**
 *  export
 */

exports.close = close;
exports.open = open;
exports.success = success;
exports.failure = failure;
exports.notifyPushSent = notifyPushSent;
exports.getImageDataURI = getImageDataURI;