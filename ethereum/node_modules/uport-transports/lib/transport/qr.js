'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.send = exports.chasquiSend = undefined;

var _ui = require('./ui');

var _util = require('./../message/util.js');

var _messageServer = require('./messageServer');

var POLLING_INTERVAL = 2000;

/**
*  A QR tranpsort which uses our provided QR modal to relay a request to a uPort client
*
*  @param    {String}       displayText   dialog used in qr modal display
*  @return   {Function}                   a configured QRTransport Function
*  @param    {String}       message       a uport client request message
*  @param    {Object}       [opt={}]
*  @param    {Function}     [cancel]      cancel callback, called on modal close
*  @return   {Function}                   a function to close the QR modal
*/
var send = function send(displayText) {
  return function (message) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        cancel = _ref.cancel;

    var uri = (0, _util.messageToURI)(message);
    uri = /callback_type=/.test(uri) ? uri : (0, _util.paramsToQueryString)(uri, { callback_type: 'post' });
    (0, _ui.open)(uri, cancel, displayText);
    return _ui.close;
  };
};

/**
  *  A QR Code and Chasqui Transport. The QR modal is configured for tranporting the request, while the
  *  response will be returned through Chasqui.
  *
  *  @param    {Object}       [config={}]               an optional config object
  *  @param    {String}       [config.chasquiUrl]       url of messaging server, defaults to Chasqui instance run by uPort
  *  @param    {String}       [config.pollingInterval]  milisecond interval at which the messaging server will be polled for a response
  *  @return   {Function}                               a configured QRTransport Function
  *  @param    {String}       message                   a uPort client request message
  *  @return   {Promise<Object, Error>}                 a function to close the QR modal
  */
var chasquiSend = function chasquiSend() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref2$chasquiUrl = _ref2.chasquiUrl,
      chasquiUrl = _ref2$chasquiUrl === undefined ? _messageServer.CHASQUI_URL : _ref2$chasquiUrl,
      _ref2$pollingInterval = _ref2.pollingInterval,
      pollingInterval = _ref2$pollingInterval === undefined ? POLLING_INTERVAL : _ref2$pollingInterval,
      displayText = _ref2.displayText;

  var transport = (0, _messageServer.URIHandlerSend)(send(displayText), { chasquiUrl: chasquiUrl, pollingInterval: pollingInterval });
  return function (message, params) {
    return transport(message, params).then(function (res) {
      (0, _ui.close)();
      return res;
    }, function (err) {
      (0, _ui.close)();
      throw new Error(err);
    });
  };
};

exports.chasquiSend = chasquiSend;
exports.send = send;